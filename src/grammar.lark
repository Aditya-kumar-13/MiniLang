
?start: program

program: statement*

?statement: declaration ";"
          | assignment ";"
          | print_statement ";"
          | if_statement
          | while_statement
          | expr ";"


declaration: "let" IDENTIFIER "=" expr TYPE_NAME

assignment: IDENTIFIER "=" expr

print_statement: "print" "[" print_args? "]"

print_args: expr ("," expr)*

if_statement: "if" "[" logic_expr "]" block
            | "if" "[" logic_expr "]" block "else" block

while_statement: "while" "[" logic_expr "]" block

block: "[" statement* "]"
     | statement

?expr: logic_expr

?logic_expr: logic_and_expr
           | logic_expr "||" logic_and_expr  -> or_op

?logic_and_expr: equality_expr
               | logic_and_expr "&&" equality_expr  -> and_op

?equality_expr: comparison_expr
              | equality_expr "==" comparison_expr  -> eq
              | equality_expr "!=" comparison_expr  -> ne

?comparison_expr: arithmetic_expr
                | comparison_expr "<" arithmetic_expr   -> lt
                | comparison_expr "<=" arithmetic_expr  -> le
                | comparison_expr ">" arithmetic_expr   -> gt
                | comparison_expr ">=" arithmetic_expr  -> ge

?arithmetic_expr: term
                | arithmetic_expr "+" term  -> add
                | arithmetic_expr "-" term  -> sub

?term: factor
     | term "*" factor  -> mul
     | term "/" factor  -> div
     | term "%" factor  -> mod

?factor: unary_expr

?unary_expr: primary
           | "+" unary_expr  -> pos
           | "-" unary_expr  -> neg
           | "!" unary_expr  -> not_op

?primary: number
        | string
        | boolean
        | variable
        | "(" expr ")"

number: SIGNED_NUMBER
string: ESCAPED_STRING
boolean: TRUE | FALSE
variable: IDENTIFIER

TRUE: "true"
FALSE: "false"

TYPE_NAME: "int" | "float" | "str" | "bool"

%import common.SIGNED_NUMBER
%import common.ESCAPED_STRING
%import common.CNAME -> IDENTIFIER
%import common.WS
%ignore WS

COMMENT: "//" /[^\n]*/
%ignore COMMENT